import os
from bs4 import BeautifulSoup, Tag

dir_path = os.path.dirname(os.path.realpath(__file__))
blank_page = open(dir_path + '/templates/blank_page.html', 'r').read()
basic_theme = open(dir_path + '/themes/basic.css', 'r').read()
components = {}

class BeautifulSoup(BeautifulSoup):
    def add_class(self, class_name):
        self._text['class'] += [class_name]
        return self

    def change_type(self, type_name):
        self.name = type_name
        return self

    def to_string(self) -> str:
        return str(self.prettify(formatter="html5"))

    def append_element(self, element, where=None) -> None:
        if where is None or where is self.html.body:
            self.html.body.script.insert_before(element)
        else:
            where.append(element)

    def insert_element(self, position: int, element, where=None) -> None:
        if where is None or where is self.html.body:
            self.html.body.insert(position, element)
        else:
            where.insert(element)


class BasicElement(Tag):
    def __init__(self, tag_type, string_content='', **kwargs):
        super(BasicElement, self).__init__(None, None, tag_type, None, None, **kwargs)
        self.name = tag_type
        self.string = string_content
        self['class'] = []

    def add_class(self, class_name):
        self['class'] = self.get('class',[])
        self['class'] += [class_name]
        return self

    def change_type(self, type_name):
        self.name = type_name
        return self

    def to_string(self) -> str:
        return str(self.prettify(formatter="html5")).replace('\n','<br>')

    def append_element(self, element, where=None) -> None:
        if where is None or where is self.html.body:
            self.html.body.script.insert_before(element)
        else:
            where.append(element)

    def insert_element(self, position: int, element, where=None) -> None:
        if where is None or where is self.html.body:
            self.html.body.insert(position, element)
        else:
            where.insert(element)

    def align_center(self):
        return self.add_class('align-center')

class BasicPageObject(BeautifulSoup, BasicElement):
    def __init__(self, title: str):
        super().__init__(blank_page, features='html5lib')
        self.html.head.title.string = title
        self.theme = BasicElement('style', basic_theme)
        self.html.head.append(self.theme)
        self.body = self.html.body

class TextElement(BasicElement):
    def __init__(self, tag_type, text='', **kwargs):
        super(BasicElement, self).__init__(None, None, tag_type, None, None, **kwargs)
        self._text_elements = [BasicText(text)]
        self.append(self._text_elements[0])

    def add_text_element(self, text: str, text_type: str = 'span', class_list=None):
        new_text = BasicText(text, text_type, class_list)
        self._text_elements.append(new_text)
        self.append(new_text)

    def add_element(self, text: str, text_type: str = 'span'):
        new_ele = TextElement(text, text_type)
        self._text_elements.append(new_ele)
        self.append(new_ele)


class List(BasicElement):
    def __init__(self, list_content=None, **kwargs):
        super(BasicElement, self).__init__(None, None, 'ul', None, None, **kwargs)
        for item in list_content:
            self.append(TextElement('li', item))

    def add_item(self, item):
        self.append(TextElement('li', item))


class BasicText(BasicElement):
    def __init__(self, content, tag_type='span', class_list=None, **kwargs):
        super(BasicElement, self).__init__(None, None, tag_type, None, None, **kwargs)
        self.string = content
        if isinstance(class_list, list):
            self['class'] = class_list
        elif isinstance(class_list, str):
            self['class'] = [class_list]
        elif class_list is None:
            self['class'] = []
        else:
            raise TypeError('class_list must be str or list')

    def lead_format(self):
        return self.add_class('lead')

    def bold_type(self):
        return self.change_type('strong')

    def small_type(self):
        return self.change_type('small')

    def underlined_type(self):
        return self.change_type('u')

for file in os.listdir(dir_path + '/components'):
    components[file[:-5]] = open(f'{dir_path}/components/{file}').read()


class Component(BeautifulSoup):
    component_type = None
    def __init__(self):
        super().__init__(components[self.component_type], features="html5lib")

class NavBar(Component):
    component_type ='NavBar'
    def __init__(self,title,url='#'):
        super().__init__()
        self.a.string=title
        self.a['href']=url

class Jumbotron(Component):
    component_type ='Jumbotron'
    def __init__(self,title,subtitle):
        super().__init__()
        self.h1.string = title
        self.p.string = subtitle
        self.body = self.div.div

class Footer(Component):
    component_type ='Footer'

